const User = require('./user.js');
const TelegramApi = require('node-telegram-bot-api');

const token = '6204085451:AAEriDvTAjHmxHQcjt66Q3xgEvsVFQmqE3c';
const bot = new TelegramApi(token, {polling: true});

const sequelize = require('./database');

const UserModel = require('./models');
const XLSX = require('xlsx');
const Console = require("console");
const { Sequelize } = require('sequelize');

let users = [];
const adminId = 'anastasiazems';
const adminId2 = 'tati_barabanova';
const adminId3 = 'Korepusik';
const adminId4 = 'olgalinn';
const adminId5 = 'ftx3d';

bot.setMyCommands([
    {command: '/start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'},
]);

const start = async () => {

    // database logic
    try {
        await sequelize.authenticate();
        await sequelize.sync();
    } catch (e) {
        console.log(e);
    }


    bot.on('message', async msg => {

        const text = msg.text;
        const chatId = msg.chat.id;
        const userId = msg.from.username;

        try {

            if (msg.text === undefined) {
                return;
            }

            // check client info
            if (!users[chatId]) {
                console.log(`user with id ${chatId} not found im users list`);

                users[chatId] = new User(chatId);
                users[chatId].state = 'start';
                users[chatId].userName = userId;

                console.log(`user with id ${chatId} added to users list`);
            } else {
                console.log(`user with id ${chatId} found, state [${users[chatId].state}], register [${users[chatId].registerComplete}]`);
            }

            // ADMIN CMD
            if (msg.text.toLowerCase() === '/report') {
                if (userId === adminId) {
                    await bot.sendMessage(chatId, '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ excel —Ñ–∞–π–ª–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
                    await exportToExcel();
                    const fileId = './users.xlsx'; // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    await bot.sendDocument(chatId, fileId);
                    return;
                }

                if (userId === adminId2) {
                    await bot.sendMessage(chatId, '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ excel —Ñ–∞–π–ª–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
                    await exportToExcel();
                    const fileId = './users.xlsx'; // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    await bot.sendDocument(chatId, fileId);
                    return;
                }

                if (userId === adminId3) {
                    await bot.sendMessage(chatId, '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ excel —Ñ–∞–π–ª–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
                    await exportToExcel();
                    const fileId = './users.xlsx'; // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    await bot.sendDocument(chatId, fileId);
                    return;
                }

                if (userId === adminId4) {
                    await bot.sendMessage(chatId, '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ excel —Ñ–∞–π–ª–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
                    await exportToExcel();
                    const fileId = './users.xlsx'; // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    await bot.sendDocument(chatId, fileId);
                    return;
                }

                if (userId === adminId5) {
                    await bot.sendMessage(chatId, '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ excel —Ñ–∞–π–ª–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
                    await exportToExcel();
                    const fileId = './users.xlsx'; // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    await  bot.sendDocument(chatId, fileId);
                    return;
                }
            }

            // Intro msg
            if (msg.text.toLowerCase() === '/start') {

                if (userId === adminId) {
                    await bot.sendMessage(chatId, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –∏ /invite –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
                }

                if (userId === adminId2) {
                    await bot.sendMessage(chatId, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –∏ /invite –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
                }

                if (userId === adminId3) {
                    await bot.sendMessage(chatId, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –∏ /invite –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
                }

                if (userId === adminId4) {
                    await bot.sendMessage(chatId, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –∏ /invite –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
                }

                if (userId === adminId5) {
                    await bot.sendMessage(chatId, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –∏ /invite –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
                }


                // check else create db record
                const userExist = await UserModel.findOne({
                    where: {chatId: `${chatId}`}
                });

                if (userExist) {
                    Console.log(`–∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º chatId —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                } else {
                    Console.log(`–∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º chatId –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                    await UserModel.findOrCreate({where: {chatId: `${chatId}`}});
                }

                await bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –±—Ä–µ–Ω–¥–∞ Solpro –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ HoReCa. –ó–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ —Å –ø–æ–ª–µ–∑–Ω–æ–π –∏ —Ü–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π!' +
                    '\n' +
                    '\n' +
                    '12 –º–∞—è —É —Ç–µ–±—è –µ—Å—Ç—å —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ ‚Äî –ø–æ–µ–∑–¥–∫—É –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å GASTREET! –î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–∞–º –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã —Ç–æ–∂–µ –∏–∑ –≥–∞—Å—Ç—Ä–æ–∫–æ–º—å—é–Ω–∏—Ç–∏ üôÇ');

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥. —Ä–µ–≥–∏
                const checkUserReg = await UserModel.findOne({
                    where: {chatId: `${chatId}`}
                });

                users[chatId].state = 'lastName';

                //await bot.sendMessage(chatId, '–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–∞–º –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã —Ç–æ–∂–µ —à–µ—Ñ :)');
                return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é:');
            }

            // Register
            if (msg.text.toLowerCase() === '/register') {

                // check registration complete before.
                const userExist = await UserModel.findOne({
                    where: {chatId: `${chatId}`}
                });

                // check else create db record
                if (userExist) {
                    Console.log(`–∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º chatId —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                } else {
                    Console.log(`–∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º chatId –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                    await UserModel.create({chatId});
                }

                if (userExist) {
                    Console.log(`–∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º chatId —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                    if (userExist.registerComplete) {
                        return bot.sendMessage(chatId, '–í—ã —É–∂–µ –¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å /cancel_reg –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏.');
                    }
                }

                users[chatId].state = 'lastName';

                await bot.sendMessage(chatId, '–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–∞–º –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã —Ç–æ–∂–µ —à–µ—Ñ :)');
                return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é:');
            }

            if (msg.text.toLowerCase() === '/invite') {
                if (userId === adminId) {
                    users[chatId].state = 'invite';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ id:');
                }

                if (userId === adminId2) {
                    users[chatId].state = 'invite';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ id:');
                }

                if (userId === adminId3) {
                    users[chatId].state = 'invite';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ id:');
                }

                if (userId === adminId4) {
                    users[chatId].state = 'invite';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ id:');
                }

                if (userId === adminId5) {
                    users[chatId].state = 'invite';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ id:');
                }
            }

            // Global user state
            switch (users[chatId].state) {

                // ADMIN ONLY
                case 'invite':
                    const inviteUser = await UserModel.findOne({
                        where: {chatId: `${msg.text}`}
                    });

                    if (inviteUser) {
                        await bot.sendMessage(msg.text, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç! –°—Å—ã–ª–∫–∞ : https://t.me/+mGI7zFqTLNQyYjZi');
                        await bot.sendMessage(chatId, '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
                        return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ id:');
                    } else {

                        await bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${msg.text} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                        return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ id:');
                    }


                // 1- Second name (–§–∞–º–∏–ª–∏—è)
                case 'lastName':
                    if (!containsDigits(msg.text)) {
                        return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é:');
                    }

                    users[chatId].lastName = msg.text;
                    users[chatId].state = 'firstName';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ò–º—è:');

                case 'firstName':
                    if (!containsDigits(msg.text)) {
                        return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ò–º—è:');
                    }

                    users[chatId].firstName = msg.text;
                    users[chatId].state = 'middleName';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –û—Ç—á–µ—Å—Ç–≤–æ:');

                case 'middleName':
                    if (!containsDigits(msg.text)) {
                        return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –û—Ç—á–µ—Å—Ç–≤–æ:');
                    }

                    users[chatId].middleName = msg.text;
                    users[chatId].state = 'companyInfo';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç–µ (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞):');

                case 'companyInfo':
                    if (msg.text.length < 2) {
                        return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç–µ (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞):');
                    }

                    users[chatId].companyInfo = msg.text;
                    users[chatId].state = 'companyAdres';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏:');

                case 'companyAdres':
                    if (msg.text.length < 2) {
                        return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏:');
                    }
                    users[chatId].companyAdres = msg.text;
                    users[chatId].state = 'companyLabel';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–º–µ–Ω–Ω–æ –≤—ã–≤–µ—Å–∫–∞):');

                case 'companyLabel':
                    users[chatId].companyLabel = msg.text;
                    users[chatId].state = 'companyInn';
                    return bot.sendMessage(chatId, '–ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏:');

                case 'companyInn':
                    if (!containsOnlyDigits(msg.text)) {
                        return bot.sendMessage(chatId, '–ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏:');
                    }

                    if(msg.text.length < 7){
                        return bot.sendMessage(chatId, '–ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏:');
                    }

                    users[chatId].companyInn = msg.text;
                    users[chatId].state = 'workInfo';
                    return bot.sendMessage(chatId, '–î–æ–ª–∂–Ω–æ—Å—Ç—å:');

                case 'workInfo':
                    if (msg.text.length < 3) {
                        return bot.sendMessage(chatId, '–î–æ–ª–∂–Ω–æ—Å—Ç—å:');
                    }

                    users[chatId].workInfo = msg.text;
                    users[chatId].state = 'city';
                    return bot.sendMessage(chatId, '–ì–æ—Ä–æ–¥:');

                case 'city':
                    if (msg.text.length < 3) {
                        return bot.sendMessage(chatId, '–ì–æ—Ä–æ–¥:');
                    }

                    users[chatId].city = msg.text;
                    users[chatId].state = 'telephone';
                    return bot.sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω:');

                // telephone
                // >>>>>>>>>
                // telephone
                case 'telephone':
                    if(!containsOnlyDigits(msg.text)){
                        return bot.sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω:');
                    }

                    users[chatId].telephone = msg.text;
                    users[chatId].state = 'aboutChannel';

                    return bot.sendMessage(chatId, '–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª –æ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ:', {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–û—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞', callback_data: 'dist'}],
                                [{ text: '–û—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –†—É—Å–∞–≥—Ä–æ', callback_data: 'rusagro' }],
                                [{ text: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç', callback_data: 'internet' }],
                                [{ text: '–î—Ä—É–≥–æ–µ', callback_data: 'other' }]
                            ]
                        }
                    });

                case 'aboutChannel':
                    switch (msg.text) {
                        case '–û—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞':
                            users[chatId].aboutChannel = msg.text;
                            users[chatId].state = 'distributeName';
                            return bot.sendMessage(chatId, '–ö–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–µ—Ä–∞?');
                    }

                    users[chatId].aboutChannel = msg.text;
                    users[chatId].registerComplete = true;
                    users[chatId].state = 'start';

                    // record to db
                    await SaveToDB(chatId);
                    return bot.sendMessage(chatId, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:) –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.');

                case 'distributeName':

                    users[chatId].distributeName = msg.text;
                    users[chatId].registerComplete = true;
                    users[chatId].state = 'start';

                    // record to db
                    await SaveToDB(chatId);
                    return bot.sendMessage(chatId, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:) –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.');


                default :
                    users[chatId].state = 'start';
                    users[chatId].Clear();
                    return bot.sendMessage(chatId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..');


            }
        } catch (e) {
            Console.log(`–û–®–ò–ë–ö–ê ${e}`);
            return bot.sendMessage(chatId, `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ${e.toString()}`);
        }
    });

}

bot.on('callback_query', async  (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_data, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ—Ç—É
    switch (data) {
        case 'dist':
            // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä "–û—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞"
            users[chatId].aboutChannel = '–û—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞';
            users[chatId].state = 'distributeName';
            return bot.sendMessage(chatId, '–ö–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–µ—Ä–∞?');
        case 'rusagro':
            // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä "–û—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –†—É—Å–∞–≥—Ä–æ"
            users[chatId].aboutChannel = '–û—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –†—É—Å–∞–≥—Ä–æ';
            users[chatId].registerComplete = true;
            users[chatId].state = 'start';
            await SaveToDB(chatId);
            return bot.sendMessage(chatId, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:) –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.');

        case 'internet':
            // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç"
            users[chatId].aboutChannel = '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç';
            users[chatId].registerComplete = true;
            users[chatId].state = 'start';
            await SaveToDB(chatId);
            return bot.sendMessage(chatId, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:) –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.');

        case 'other':
            // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä "–î—Ä—É–≥–æ–µ"
            users[chatId].aboutChannel = '–î—Ä—É–≥–æ–µ';
            users[chatId].registerComplete = true;
            users[chatId].state = 'start';
            await SaveToDB(chatId);
            return bot.sendMessage(chatId, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:) –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.');
    }

    // —É–¥–∞–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
    bot.answerCallbackQuery(query.id);
    bot.editMessageReplyMarkup({
        inline_keyboard: []
    }, {
        chat_id: chatId,
        message_id: query.message.message_id
    });
});

async function SaveToDB(chatId){
// record to db
    let user = await UserModel.findOne({
        where: {chatId: `${chatId}`}
    });

    if(!users[chatId].userName){
        user.userName = `${chatId}`;
    }
    else{
        user.userName = users[chatId].userName;
    }

    user.firstName = users[chatId].firstName;
    user.lastName = users[chatId].lastName;
    user.middleName = users[chatId].middleName;
    user.workInfo = users[chatId].workInfo;
    user.companyInfo = users[chatId].companyInfo;
    user.companyAdres = users[chatId].companyAdres;
    user.companyLabel = users[chatId].companyLabel;
    user.companyInn = users[chatId].companyInn;
    user.telephone = users[chatId].telephone;
    user.city = users[chatId].city;
    user.aboutChannel = users[chatId].aboutChannel;
    user.distributeName = users[chatId].distributeName;
    user.state = users[chatId].state;
    user.registerComplete = users[chatId].registerComplete;

    //await user.save();

    try {
        await user.save();
    } catch (error) {
        if (error instanceof Sequelize.UniqueConstraintError) {
            console.log('–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏:', error);
            console.log('–ó–∞–ø–∏—Å—å, –≤—ã–∑–≤–∞–≤—à–∞—è –æ—à–∏–±–∫—É:', user.get());
            return bot.sendMessage(chatId, '–¢–∞–∫–æ–π –ò–ù–ù —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.');
        } else {
            console.log('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞:', error);
        }
    }
}

start();

function containsOnlyDigits(str) {
    return /^[0-9+]+$/.test(str);
}

function containsDigits(str) {
    const regex = /^[a-zA-Z–∞-—è–ê-–Ø]+$/;
    return regex.test(str);
}

function containsInn(str){
    const regex =/^(\d{10})$/;
    return regex.test(str);
}

async function exportToExcel() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–ø–∏—Å–∏, –≥–¥–µ registerComplete = true
        const users = await UserModel.findAll({
            where: {
                registerComplete: true
            }
        });


        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª Excel
        const data = users.map((user) => ({
            id: user.id,
            UserID : user.chatId,
            –§–ò–û: `${user.lastName} ${user.firstName} ${user.middleName}`,
            –ì–æ—Ä–æ–¥ : user.city,
            –î–æ–ª–∂–Ω–æ—Å—Ç—å: user.workInfo,
            –ö–æ–º–ø–∞–Ω–∏—è: user.companyInfo,
            –ê–¥—Ä–µ—Å: user.companyAdres,
            –í—ã–≤–µ—Å–∫–∞: user.companyLabel,
            –ò–ù–ù_–∫–æ–º–ø–∞–Ω–∏–∏: user.companyInn,
            –¢–µ–ª–µ—Ñ–æ–Ω: user.telephone,
            –û—Ç–∫—É–¥–∞_—É–∑–Ω–∞–ª : user.aboutChannel,
            –î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä: user.distributeName,
        }));

        //console.log(data);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
        const workbook = XLSX.utils.book_new();

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –∫–Ω–∏–≥—É
        const worksheet = XLSX.utils.json_to_sheet(data);

        XLSX.utils.book_append_sheet(workbook, worksheet, 'Users');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–∏–≥—É –≤ —Ñ–∞–π–ª
        XLSX.writeFile(workbook, './users.xlsx');

        console.log('Data exported to Excel successfully!');

    } catch (error) {
        console.error('Error exporting data to Excel:', error);
    }
}

function checkFullName(fullName) {
    const nameRegex = /^[\u0400-\u04FF\s]+$/;
    const words = fullName.trim().split(/\s+/);

    if (words.length !== 3) {
        return false;
    }

    return words.every((word) => nameRegex.test(word));
}

function checkTelephone(str){
    const regex =/^\+7\d{10}$/;
    return regex.test(str);
}

